{"version":3,"sources":["logo.svg","List.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","__webpack_require__","p","src_List","props","_useState","useState","_useState2","Object","slicedToArray","tmpTodos","setTmpTodos","_useState3","_useState4","tmpList","setTmpList","useEffect","i","todos","length","tmpTarget","splice","todo","todoDate","complete","number","displayAll","displayComplete","displayUnComplete","completeTodos","filter","unCompleteTodos","react_default","a","createElement","Fragment","className","onClick","map","index","key","getTime","Date","newTodos","todoIndex","setTodos","console","log","deleteTodo","getMonth","getDate","taskComplete","Boolean","window","location","hostname","match","ReactDOM","render","tmpTodo","setTmpTodo","_useState5","_useState6","isPoppedOut","setPoppedOut","_useState7","_useState8","date","setDate","type","name","onChange","e","target","value","entry_default","format","concat","toConsumableArray","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66d61f49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect} from 'react';\nimport './List.css'\n\nexport default (props) => {\n  const [tmpTodos, setTmpTodos] = useState([]);\n  const [tmpList, setTmpList] = useState(1);\n\n  useEffect(() => {\n    for (let i = 0; i < props.todos.length; i += 1) {\n      const tmpTarget = props.todos[i];\n      props.todos.splice(i, 1, {todo:tmpTarget.todo,todoDate:tmpTarget.todoDate,complete: tmpTarget.complete, number:i});\n    }\n    setTmpTodos(props.todos);\n    switch(tmpList){\n      case 1:\n        setTmpTodos(props.todos);\n        displayAll();\n        break;\n      case 2:\n        displayComplete();\n        break;\n      case 3:\n        displayUnComplete();\n        break;\n    }\n  },[props.todos])\n\n  const deleteTodo = i => {\n    const newTodos = props.todos.filter((a, todoIndex) => {\n      return i !== todoIndex;\n    });\n    props.setTodos(newTodos);\n    switch(tmpList){\n      case 1:\n        console.log(props.todos);\n        break;\n      case 2:\n        const completeTodos = props.todos.filter((todo) => {\n          return todo.complete === true;\n        });\n        setTmpTodos(completeTodos);\n        break;\n      case 3:\n        const unCompleteTodos = props.todos.filter((todo) => {\n          return todo.complete !== true;\n        });\n        setTmpTodos(unCompleteTodos);\n        break;\n    }\n  };\n\n  const displayAll = () => {\n    setTmpTodos(props.todos);\n    setTmpList(1)\n  };\n\n  const displayComplete = () => {\n    const completeTodos = props.todos.filter((todo) => {\n      return todo.complete === true;\n    });\n    setTmpTodos(completeTodos);\n    setTmpList(2)\n  };\n\n  const displayUnComplete = () => {\n    const unCompleteTodos = props.todos.filter((todo) => {\n      return todo.complete !== true;\n    });\n    setTmpTodos(unCompleteTodos);\n    setTmpList(3)\n  };\n\n  const taskComplete = (i) => {\n    console.log(props.todos[0].todoDate.getTime());\n    console.log(new Date().getTime());\n    const tmpTarget = props.todos[i];\n    if ( tmpTarget.complete === true ) {\n      props.todos.splice(i, 1, {todo:tmpTarget.todo,todoDate:tmpTarget.todoDate,complete: false,number:tmpTarget.number});\n    }\n    else {\n      props.todos.splice(i, 1, {todo:tmpTarget.todo,todoDate:tmpTarget.todoDate,complete: true,number:tmpTarget.number});\n    };\n    setTmpTodos(props.todos);\n    switch(tmpList){\n      case 1:\n        break;\n      case 2:\n        const completeTodos = props.todos.filter((todo) => {\n          return todo.complete === true;\n        });\n        setTmpTodos(completeTodos);\n        break;\n      case 3:\n        const unCompleteTodos = props.todos.filter((todo) => {\n          return todo.complete !== true;\n        });\n        setTmpTodos(unCompleteTodos);\n        break;\n      default:\n        break;\n    }\n\n\n  };\n  return (\n    <>\n      <div className=\"list__filter\">\n        <span className={tmpList === 1? \"target\":\"\"}　onClick={displayAll}>全て</span>\n        <span className={tmpList === 2? \"target\":\"\"} onClick={displayComplete}>完了</span>\n        <span className={tmpList === 3? \"target\":\"\"} onClick={displayUnComplete}>未完了</span>\n      </div>\n      <ul>\n        {tmpTodos.map((todo,index) => {\n          return (\n            <li key={index} className={todo.todoDate.getTime() + 360000 < new Date().getTime() ? \"deadline list__card\":\"list__card\"}>\n              <div className=\"list__closedIcon\" onClick={() => deleteTodo(todo.number)}>x</div>\n              <div className=\"date\">{todo.todoDate.getMonth()+1}/{todo.todoDate.getDate()}</div>\n              <div className=\"lead\">{todo.todo}</div>\n              <button className={todo.complete === true?\"complete\":\"uncomplete\"} onClick={() => taskComplete(todo.number)}>●</button>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {useState} from 'react';\nimport DatePicker from 'react-date-picker';\nimport logo from './logo.svg';\nimport List from './List.js'\nimport './App.css';\n\nexport default () => {\n  const [todos, setTodos] = useState([]);//いっぱい\n  const [tmpTodo, setTmpTodo] = useState({todo:'',todoDate:new Date(), complete:false,number:0});\n  const [isPoppedOut, setPoppedOut] = useState(false);\n  const [date, setDate] = useState(new Date());\n\n  const addTodo = () => {\n    if (tmpTodo === \"\") {\n      return;\n    }\n    setTodos([...todos, tmpTodo]);\n    setPoppedOut(false);\n  };\n  const popout =() => {\n    setPoppedOut(true);\n  };\n\n  const popoutClosed =() => {\n    setPoppedOut(false);\n  };\n\nconst changeDate = date => {\n  if (date !== null) {\n    setDate( date );\n    setTmpTodo({todo:tmpTodo.todo,todoDate:date});\n  }\n  else {\n    setTmpTodo({todo:tmpTodo.todo,todoDate:new Date()});\n  }\n  };\n\n  return (\n    <>\n      <h1>TODO APP</h1>\n      <div className=\"main\">\n        <button className=\"home__button\" onClick={popout}>\n          やることを追加\n        </button>\n        { isPoppedOut ?\n          <div className=\"card\">\n            <div className=\"closedIcon\" onClick={popoutClosed}>×</div>\n            <h2>やることを入力</h2>\n            <input\n              className=\"form__text\"\n              type=\"text\"\n              name=\"todo\"\n              onChange={e => setTmpTodo({todo:e.target.value,todoDate:tmpTodo.todoDate})}\n              value={tmpTodo.todo}\n            />\n            <h2>日付を入力</h2>\n            <DatePicker\n              className=\"form__datePicker\"\n              format=\"y/MM/dd\"\n              onChange={changeDate}\n              value={date}\n            />\n            <div className=\"form__submit__wrapper\">\n              <button className=\"form__submit\" onClick={addTodo}>送信</button>\n            </div>\n          </div>: <></> }\n        <List todos={todos} setTodos={setTodos} />\n      </div>\n    </>\n  );\n};\n"],"sourceRoot":""}